buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/releases' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        //引入其他的插件
        classpath 'digital.wup:android-maven-publish:3.4.0'
    }
}

plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

apply plugin: 'com.android.library'

apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/config.gradle'
apply plugin: 'digital.wup.android-maven-publish'
apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-3.3-bin.zip'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    // noinspection GradleCompatible
    implementation 'com.android.support:design:28.0.0'

    // 图片加载库
    implementation 'com.github.bumptech.glide:glide:4.9.0'

    // 低代码SDK依赖
    if (shouldLoadLocalDepFun()) {
        // 本地
        implementation project(':liveroom')
    } else {
        // 开源
        def liveRoomSdk = parseStringInPropOrLocal('LIVEROOM_SDK')
        if (liveRoomSdk != null) {
            implementation(liveRoomSdk)
        } else {
            // 远程
            implementation("${GROUP}:${PREFIX}liveroom:${VER}${SUFFIX}") { changing = true }
        }
    }
}