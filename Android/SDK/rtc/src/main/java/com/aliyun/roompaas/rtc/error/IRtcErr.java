package com.aliyun.roompaas.rtc.error;import java.util.Arrays;import java.util.HashSet;import java.util.Set;/** * Created by KyleCe on 2022/5/28 */public interface IRtcErr {    interface Unrecoverable {        String S_REENTER = "请重新加入或者重启App";        Val _16974340 = new Val(16974340, "状态错误，SDK内部状态错误。", "销毁SDK重新创建实例。");        Val _16843011 = new Val(16843011, "初始化SDK异常");        Val _16843020 = new Val(16843020, "初始化SDK异常");        Val _16843021 = new Val(16843021, "初始化SDK异常");        Val _17039874 = new Val(17039874, "视频渲染中发生异常：系统异常错误导致渲染引擎报错", "重新加入频道或者重启App");        Val _33620229 = new Val(17039874, "Session会话已经被移除", "建议您：销毁实例之后重新创建实例并加入频道");        Set<Integer> CODE_SET = new HashSet<>(Arrays.asList(                _16974340.code                , _16843011.code                , _16843020.code                , _16843021.code                , _17039874.code                , _33620229.code        )        );    }    interface JoinChannel {        Val _16908804 = new Val(16908804, "加入频道超时", "检查网络连接是否正常");        Val _33620483 = new Val(33620483, "加入频道失败：频道已经失效（目前频道有效期为48小时）。", "重新生成频道鉴权令牌（Token）");        Val _33620485 = new Val(33620485, "加入频道失败：Token无效。", "重新生成频道鉴权令牌（Token）");        Val _33621762 = new Val(33621762, "用户重复入会失败。如同一个用户，两个设备，进入同一个会。或者该用户上一个session还没有退会完成。", "");        Val _33620228 = new Val(33620228, "客户端离开频道了之后又使用了相同的sessionId入会", "");        Val _83951634 = new Val(83951634, "gslb请求UserId无效", "请尝试重新加入频道");        Val _16974337 = new Val(16974337, "参数AuthInfo中的gslb字段错误", "检查AuthInfo中gslb字段是否完整，或验证AuthInfo是否可以通过校验");        Val _0x01010406 = new Val(0x01010406, "未进入频道推流失败", "");        Val _0x16843782 = new Val(0x16843782, "未进入频道推流失败", "");        Set<Integer> CODE_SET = new HashSet<>(Arrays.asList(                _16908804.code                , _33620483.code                , _33620485.code                , _33621762.code                , _33620228.code                , _83951634.code                , _16974337.code                , _0x01010406.code                , _0x16843782.code        )        );    }    interface Publish {        String S_REPUBLISH = "调用publish重新进行推流";        Val _16974596 = new Val(16974596, "本地流（视频流、屏幕流、音频流）不存在。", S_REPUBLISH);        Val _16974597 = new Val(16974597, "本地流（视频流、屏幕流、音频流）错误。", S_REPUBLISH);        Val _16974600 = new Val(16974600, "本地流（视频流、屏幕流、音频流）错误。", S_REPUBLISH);        Val _33620993 = new Val(33620993, "推流用户推流中断", S_REPUBLISH);        Val _0x01010450 = new Val(0x01010450, "推送音频流失败", "");        Val _Ox01010451 = new Val(0x01010451, "推送视频流失败", "");        Val _0x01010453 = new Val(0x01010453, "推送屏幕共享失败", "");        Set<Integer> CODE_SET = new HashSet<>(Arrays.asList(                _16974596.code                , _16974597.code                , _16974600.code                , _33620993.code                , _0x01010450.code                , _Ox01010451.code                , _0x01010453.code        )        );    }    interface Subscribe {        // ignored , processed in SDK inner    }    interface Network {        String S_SIGNAL_TIME_OUT = "信令请求超时";        String S_CHECK_NET = "请检查网络连接是否正常";        Val _16908812 = new Val(16908812, "心跳包超时", S_CHECK_NET);        Val _16909313 = new Val(16909313, "信令请求错误", S_CHECK_NET);        Val _16908816 = new Val(16908816, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908817 = new Val(16908817, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908818 = new Val(16908818, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908819 = new Val(16908819, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908820 = new Val(16908820, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908821 = new Val(16908821, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908822 = new Val(16908822, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908823 = new Val(16908823, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908824 = new Val(16908824, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _17105409 = new Val(17105409, "媒体通道建立失败", S_CHECK_NET);        Val _17105410 = new Val(17105410, "媒体通道重连失败", S_CHECK_NET);        Val _259 = new Val(259, "SDK_WARNING_LOCAL_NETWORK_DISCONNECT，本地网络连接断开", S_CHECK_NET);        Val _16908801 = new Val(16908801, "gslb请求长时间未收到响应超时", S_CHECK_NET);        Val _16908804 = new Val(16908804, "入会请求长时间未收到响应超时", S_CHECK_NET);        Val _16908802 = new Val(16908802, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908803 = new Val(16908803, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908805 = new Val(16908805, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908806 = new Val(16908806, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908807 = new Val(16908807, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908808 = new Val(16908808, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908809 = new Val(16908809, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908810 = new Val(16908810, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908811 = new Val(16908811, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908813 = new Val(16908813, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908814 = new Val(16908814, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908815 = new Val(16908815, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908825 = new Val(16908825, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908832 = new Val(16908832, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908833 = new Val(16908833, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Val _16908834 = new Val(16908834, S_SIGNAL_TIME_OUT, S_CHECK_NET);        Set<Integer> CODE_SET = new HashSet<>(Arrays.asList(                _16908812.code                , _16909313.code                , _16908816.code                , _16908817.code                , _16908818.code                , _16908819.code                , _16908820.code                , _16908821.code                , _16908822.code                , _16908823.code                , _16908824.code                , _17105409.code                , _17105410.code                , _259.code                , _16908801.code                , _16908804.code                , _16908802.code                , _16908803.code                , _16908805.code                , _16908806.code                , _16908807.code                , _16908808.code                , _16908809.code                , _16908810.code                , _16908811.code                , _16908813.code                , _16908814.code                , _16908815.code                , _16908825.code                , _16908832.code                , _16908833.code                , _16908834.code        )        );    }    class Val {        public int code;        public String reason = "";        public String strategy = "";        public Val(int code) {            this(code, "", "");        }        public Val(int code, String reason) {            this(code, reason, "");        }        public Val(int code, String reason, String strategy) {            this.code = code;            this.reason = reason;            this.strategy = strategy;        }    }}