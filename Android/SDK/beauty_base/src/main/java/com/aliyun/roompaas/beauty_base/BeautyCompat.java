package com.aliyun.roompaas.beauty_base;import android.support.annotation.IntDef;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.view.View;import android.view.ViewGroup;import android.view.ViewParent;import com.aliyun.roompaas.base.util.Utils;import com.aliyun.roompaas.live.BeautyInterface;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;/** * Created by KyleCe on 2022/3/15 */public class BeautyCompat implements BConst {    public static final String IMPL_PRO_CLASS_FULL_PATH = "com.aliyun.roompaas.beauty_pro.QueenBeautyImplPro";    public static final String IMPL_LITE_CLASS_FULL_PATH = "com.aliyun.roompaas.beauty_lite.QueenBeautyImplLite";    public static final String VIEW_PRO_CLASS_FULL_PATH = "com.aliyun.roompaas.beauty_pro.beauty.ViewPanel.menu.MenuContainer";    public static final String VIEW_LITE_CLASS_FULL_PATH = "com.aliyun.roompaas.beauty_lite.BeautyLiteView";    @Retention(RetentionPolicy.SOURCE)    @IntDef({BundleType.NONE, BundleType.LITE, BundleType.PRO})    public @interface BundleType {        int NONE = 0;        int LITE = 1;        int PRO = 2;    }    @BundleType    public static int parseBundleType() {        Class<?> proClz = forValidBeautyImpl(IMPL_PRO_CLASS_FULL_PATH);        if (proClz != null) {            return BundleType.PRO;        }        Class<?> liteClz = forValidBeautyImpl(IMPL_LITE_CLASS_FULL_PATH);        if (liteClz != null) {            return BundleType.LITE;        }        return BundleType.NONE;    }    public static String forSecret(String proSecret, String liteSecret){        return proSecret/*we use same secret for lite and pro, from version 1.9.1*/;    }    @SuppressWarnings("unchecked")    @Nullable    public static Class<BeautyInterface> forValidBeautyImpl() {        return Utils.acceptFirstNonNull(forValidBeautyImpl(IMPL_PRO_CLASS_FULL_PATH), forValidBeautyImpl(IMPL_LITE_CLASS_FULL_PATH));    }    @SuppressWarnings("unchecked")    @Nullable    public static Class<View> forValidBeautyView() {        return Utils.acceptFirstNonNull(forValidViewClass(VIEW_PRO_CLASS_FULL_PATH), forValidViewClass(VIEW_LITE_CLASS_FULL_PATH));    }    private static Class<BeautyInterface> forValidBeautyImpl(String name) {        return parseValidClass(name, BeautyInterface.class);    }    private static Class<View> forValidViewClass(String name) {        return parseValidClass(name, View.class);    }    @SuppressWarnings("unchecked")    private static <T> Class<T> parseValidClass(String clzName, Class<T> type) {        try {            return (Class<T>) Class.forName(clzName);        } catch (Throwable ignore) {            return null;        }    }    public static int deFormatParam(float param) {        return (int) (param * 100);    }    public static float formatParam(int param) {        return param / 100.0f;    }    public static void removeSelfSafely(@Nullable View self) {        ViewParent vp;        if (self == null || !((vp = self.getParent()) instanceof ViewGroup)) {            return;        }        removeChildFromParent((ViewGroup) vp, self);    }    public static void removeChildFromParent(@NonNull ViewGroup vg, @NonNull View self) {        self.clearAnimation();        vg.removeView(self);    }}