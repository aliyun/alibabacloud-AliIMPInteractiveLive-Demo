package com.aliyun.roompaas.beauty_pro.remote;import android.support.annotation.Nullable;import android.support.annotation.WorkerThread;import android.text.TextUtils;import com.aliyun.roompaas.base.log.DefaultLoggerHandler;import com.aliyun.roompaas.base.log.Logger;import com.aliyun.roompaas.base.util.FileUtil;import com.aliyun.roompaas.base.util.IOUtil;import com.aliyun.roompaas.base.util.SPUtil;import com.aliyun.roompaas.base.util.ThreadUtil;import com.aliyun.roompaas.uibase.util.AppUtil;import com.dingtalk.mars.comm.NetStatusUtil;import java.io.DataInputStream;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.net.URL;import java.util.concurrent.TimeUnit;/** * Created by KyleCe on 2022/4/28 * * @WARNING keep Path and Name * @see com.aliyun.roompaas.base.AppContext#CLASS_PATH_FOR_BEAUTY_PRO_REMOTE_RESOURCE */public class ResDownloadDelegate {    public static final String TAG = "ResDownloadDelegate";    private static boolean sResourceProcessing;    private static String sResourcePath;    private static final long TASK_START_DELAY_FOR_APP_COULD_LAUNCH_SPEED_UP = 5000;    private static long sFirstAttemptTS;    private static final String REMOTE_RES_URL = "https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/res/beauty_pro_assets.zip";    public ResDownloadDelegate() {        super();        Logger.i(TAG, "construct");        sFirstAttemptTS = System.currentTimeMillis();        parseResourcePath();    }    public static boolean isResReady() {        return isPathNotEmptyAndExist(parseResourcePath());    }    /**     * the cache of the app may be cleaned, then the stored path is invalid     */    public static boolean isPathNotEmptyAndExist(String path) {        if (!TextUtils.isEmpty(path)) {            File file = new File(path);            if (file.exists()) {                return true;            } else {                // clear store                sResourcePath = "";                SPUtil.RemoteResource.removeBeautyProResPath();                SPUtil.RemoteResource.removeBeautyProDownloadedPath();            }        }        return false;    }    public static String parseResourcePath() {        if (isPathNotEmptyAndExist(sResourcePath)) {            return sResourcePath;        }        sResourcePath = SPUtil.RemoteResource.getBeautyProResPath();        if (isPathNotEmptyAndExist(sResourcePath)) {            return sResourcePath;        }        Logger.i(TAG, "triggerDownload: ");        if (!NetStatusUtil.isConnected(AppUtil.getAppContext()) || sResourceProcessing) {            return null;        }        long delayInMilli = System.currentTimeMillis() - sFirstAttemptTS > TASK_START_DELAY_FOR_APP_COULD_LAUNCH_SPEED_UP ? 0 : TASK_START_DELAY_FOR_APP_COULD_LAUNCH_SPEED_UP;        ThreadUtil.schedule(() -> {            if (sResourceProcessing) {                return;            }            sResourceProcessing = true;            String fetched = SPUtil.RemoteResource.getBeautyProDownloadedPath();            if (TextUtils.isEmpty(fetched)) {                fetched = fetch();            }            unzip(fetched);            sResourceProcessing = false;        }, delayInMilli, TimeUnit.MILLISECONDS);        return null;    }    @WorkerThread    public static String fetch() {        Logger.i(TAG, "fetch: begin");        long start = System.currentTimeMillis();        try {            URL u = new URL(REMOTE_RES_URL);            InputStream is = u.openStream();            DataInputStream dis = new DataInputStream(is);            byte[] buffer = new byte[1024];            int length;            File appCacheDir = AppUtil.getAppContext().getExternalCacheDir();            String storeFileName = appCacheDir + File.separator + "beauty_pro_assets.zip";            FileOutputStream fos = new FileOutputStream(new File(storeFileName));            while ((length = dis.read(buffer)) > 0) {                fos.write(buffer, 0, length);            }            if (DefaultLoggerHandler.isLoggable()) {                int tookSeconds4Download = (int) ((System.currentTimeMillis() - start) / 1000);                Logger.i(TAG, "fetch: download done, time=" + tookSeconds4Download + ", path=" + storeFileName);            }            SPUtil.RemoteResource.storeBeautyProDownloadedPath(storeFileName);            IOUtil.close(fos);            return storeFileName;        } catch (Throwable e) {            e.printStackTrace();            sResourceProcessing = false;            return null;        }    }    @Nullable    @WorkerThread    public static String unzip(String file) {        if (TextUtils.isEmpty(file)) {            sResourceProcessing = false;            return null;        }        try {            File appCacheDir = AppUtil.getAppContext().getExternalCacheDir();            long start = System.currentTimeMillis();            String unzipLocation = appCacheDir.getAbsolutePath() + File.separator + "beauty_pro_assets";            int unzipResult = FileUtil.unzip(file, unzipLocation);            if (DefaultLoggerHandler.isLoggable()) {                int tookSeconds4Unzip = (int) ((System.currentTimeMillis() - start) / 1000);                Logger.i(TAG, "fetch: unzip done, result= " + unzipResult + ", time=" + tookSeconds4Unzip + ", path=" + unzipLocation);            }            if (unzipResult != -1) {                SPUtil.RemoteResource.storeBeautyProResPath(unzipLocation);                sResourcePath = unzipLocation;                return unzipLocation;            } else {                sResourceProcessing = false;            }        } catch (Throwable ignore) {            sResourceProcessing = false;        }        return null;    }}