apply plugin: 'com.android.library'
apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/config.gradle'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/releases' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        //引入其他的插件
        classpath 'digital.wup:android-maven-publish:3.4.0'
    }
}

apply plugin: 'digital.wup.android-maven-publish'
apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-3.3-bin.zip'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    //noinspection GradleCompatible
    compileOnly 'com.android.support:appcompat-v7:28.0.0'
    //noinspection GradleCompatible
    compileOnly 'com.android.support:recyclerview-v7:27.1.1'
    compileOnly "com.alibaba:fastjson:${getProperty('version.fastjson')}"

    api 'com.aliyun.maliang.android:queen:1.9.1-official-pro'

    if (shouldLoadLocalDepFun()) {
        compileOnly project(':base')
        api project(':uibase')
        compileOnly project(':beauty_base')
        api project(':beauty_common')
    } else {
        compileOnly("${GROUP}:${PREFIX}base:${VER}${SUFFIX}") { changing = true }
        api("${GROUP}:${PREFIX}uibase:${VER}${SUFFIX}") { changing = true }
        compileOnly("${GROUP}:${PREFIX}beauty_base:${VER}${SUFFIX}") { changing = true }
        api("${GROUP}:${PREFIX}beauty_common:${VER}${SUFFIX}") { changing = true }
    }
}