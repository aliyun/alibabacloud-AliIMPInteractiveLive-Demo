package com.aliyun.roompaas.beauty_lite;import android.content.Context;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.view.View;import android.widget.FrameLayout;import android.widget.SeekBar;import android.widget.TextView;import com.aliyun.roompaas.live.exposable.AliLiveBeautyOptions;import com.aliyun.roompaas.beauty_base.BeautyCompat;import com.aliyun.roompaas.beauty_base.IBeautyOptUpdate;import com.aliyun.roompaas.beauty_base.IBeautyOptionHolder;/** * Created by KyleCe on 2022/3/15 * * @WARNING keep Path and Name * @see BeautyCompat#VIEW_LITE_CLASS_FULL_PATH */public class BeautyLiteView extends FrameLayout implements IBeautyOptionHolder {    private final AliLiveBeautyOptions beautyOptions = new AliLiveBeautyOptions.Builder().build();    private BeautyOptions currentSelected = BeautyOptions.beautyCheekPink;    private Context context;    private IBeautyOptUpdate update;    public BeautyLiteView(@NonNull Context context) {        this(context, null, 0);    }    public BeautyLiteView(@NonNull Context context, @Nullable AttributeSet attrs) {        this(context, attrs, 0);    }    public BeautyLiteView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        this.context = context;        inflate(context, R.layout.ilr_view_float_live_beauty, this);        setBeautyToolbarListener();    }    private void setBeautyToolbarListener() {        final Drawable indicator = context.getResources().getDrawable(R.drawable.ilr_bg_live_beauty_indicator, null);        final TextView beautyCheekPink = findViewById(R.id.beauty_cheek_pink);        final TextView beautyBrightness = findViewById(R.id.beauty_brightness);        final TextView beautyWhite = findViewById(R.id.beauty_white);        final TextView beautyBuffing = findViewById(R.id.beauty_buffing);        final TextView beautyRuddy = findViewById(R.id.beauty_ruddy);        final TextView beautySlimFace = findViewById(R.id.beauty_slim_face);        final TextView beautyShortenFace = findViewById(R.id.beauty_shorten_face);        final TextView beautyBigEye = findViewById(R.id.beauty_big_eye);        final SeekBar seekBar = findViewById(R.id.beauty_seek_bar);        final TextView beautyValue = findViewById(R.id.beauty_value);        View defaultToSelectedItem = beautyBrightness;        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {                updateBeautyOptions(beautyOptions);                beautyValue.setText(String.valueOf(i));            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {            }            @Override            public void onStopTrackingTouch(SeekBar seekBar) {                beautyValue.setText(String.valueOf(seekBar.getProgress()));                setBeautyValue(seekBar.getProgress());            }        });        OnClickListener listener = new OnClickListener() {            @Override            public void onClick(View v) {                beautyCheekPink.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyBrightness.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyWhite.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyBuffing.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyRuddy.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautySlimFace.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyShortenFace.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyBigEye.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);                beautyCheekPink.setTextColor(Color.parseColor("#999999"));                beautyBrightness.setTextColor(Color.parseColor("#999999"));                beautyWhite.setTextColor(Color.parseColor("#999999"));                beautyBuffing.setTextColor(Color.parseColor("#999999"));                beautyRuddy.setTextColor(Color.parseColor("#999999"));                beautySlimFace.setTextColor(Color.parseColor("#999999"));                beautyShortenFace.setTextColor(Color.parseColor("#999999"));                beautyBigEye.setTextColor(Color.parseColor("#999999"));                TextView clickView = ((TextView) v);                clickView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, indicator);                clickView.setTextColor(Color.parseColor("#ffffff"));                setBeautyOptionSelected(seekBar, v);            }        };        beautyCheekPink.setOnClickListener(listener);        beautyBrightness.setOnClickListener(listener);        beautyBuffing.setOnClickListener(listener);        beautyWhite.setOnClickListener(listener);        beautyRuddy.setOnClickListener(listener);        beautySlimFace.setOnClickListener(listener);        beautyShortenFace.setOnClickListener(listener);        beautyBigEye.setOnClickListener(listener);        defaultToSelectedItem.callOnClick();    }    private void setBeautyValue(int value) {        switch (currentSelected) {            case beautyRuddy:                beautyOptions.beautyRuddy = value;                break;            case beautyWhite:                beautyOptions.beautyWhite = value;                break;            case beautyBigEye:                beautyOptions.beautyBigEye = value;                break;            case beautyBuffing:                beautyOptions.beautyBuffing = value;                break;            case beautySlimFace:                beautyOptions.slimFace = value;                break;            case beautyCheekPink:                beautyOptions.beautyCheekPink = value;                break;            case beautyBrightness:                beautyOptions.beautyBrightness = value;                break;            case beautyShortenFace:                beautyOptions.shortenFace = value;                break;        }        updateBeautyOptions(beautyOptions);    }    private void updateBeautyOptions(AliLiveBeautyOptions beautyOptions) {        if (update != null) {            update.onUpdateBeautyOpt(beautyOptions);        }    }    private void setBeautyOptionSelected(SeekBar seekBar, View view) {        int id = view.getId();        if (id == R.id.beauty_cheek_pink) {            currentSelected = BeautyOptions.beautyCheekPink;            seekBar.setProgress(beautyOptions.beautyCheekPink);        } else if (id == R.id.beauty_brightness) {            currentSelected = BeautyOptions.beautyBrightness;            seekBar.setProgress(beautyOptions.beautyBrightness);        } else if (id == R.id.beauty_white) {            currentSelected = BeautyOptions.beautyWhite;            seekBar.setProgress(beautyOptions.beautyWhite);        } else if (id == R.id.beauty_buffing) {            currentSelected = BeautyOptions.beautyBuffing;            seekBar.setProgress(beautyOptions.beautyBuffing);        } else if (id == R.id.beauty_ruddy) {            currentSelected = BeautyOptions.beautyRuddy;            seekBar.setProgress(beautyOptions.beautyRuddy);        } else if (id == R.id.beauty_slim_face) {            currentSelected = BeautyOptions.beautySlimFace;            seekBar.setProgress(beautyOptions.slimFace);        } else if (id == R.id.beauty_shorten_face) {            currentSelected = BeautyOptions.beautyShortenFace;            seekBar.setProgress(beautyOptions.shortenFace);        } else if (id == R.id.beauty_big_eye) {            currentSelected = BeautyOptions.beautyBigEye;            seekBar.setProgress(beautyOptions.beautyBigEye);        }    }    @Override    public void setBeautyUpdater(IBeautyOptUpdate update) {        this.update = update;    }    private enum BeautyOptions {        beautyCheekPink,        beautyBrightness,        beautyBuffing,        beautyWhite,        beautyRuddy,        beautySlimFace,        beautyShortenFace,        beautyBigEye    }}