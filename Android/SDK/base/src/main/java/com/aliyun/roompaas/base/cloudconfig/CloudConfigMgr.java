package com.aliyun.roompaas.base.cloudconfig;import android.os.Build;import com.alibaba.dingpaas.base.DPSErrDomain;import com.alibaba.dingpaas.base.DPSError;import com.alibaba.dingpaas.cloudconfig.CloudConfigBaseInfoV2;import com.alibaba.dingpaas.cloudconfig.CloudconfigExtInterface;import com.alibaba.dingpaas.cloudconfig.CloudconfigModule;import com.alibaba.dingpaas.cloudconfig.CloudconfigNotifyCb;import com.alibaba.dingpaas.cloudconfig.CloudconfigRpcInterface;import com.alibaba.dingpaas.cloudconfig.GetAppConfigCb;import com.alibaba.dingpaas.cloudconfig.GetAppConfigReq;import com.alibaba.dingpaas.cloudconfig.GetCloudConfigCb;import com.alibaba.dingpaas.cloudconfig.GetCloudConfigReq;import com.alibaba.dingpaas.cloudconfig.GetSlsConfigCb;import com.alibaba.dingpaas.cloudconfig.GetSlsConfigReq;import com.alibaba.dingpaas.cloudconfig.GetVisibleConfigCb;import com.alibaba.dingpaas.cloudconfig.GetVisibleConfigReq;import com.alibaba.dingpaas.cloudconfig.MobileSystemInfoV2;import com.alibaba.dingpaas.mps.MPSEngine;import com.aliyun.roompaas.base.BuildConfig;import com.aliyun.roompaas.base.IDestroyable;import com.aliyun.roompaas.base.error.Errors;import com.aliyun.roompaas.base.log.Logger;import com.aliyun.roompaas.base.util.CommonUtil;import java.util.ArrayList;import java.util.List;/** * Created by KyleCe on 2022/5/16 */public enum CloudConfigMgr implements IDestroyable {    INSTANCE;    public static final String TAG = "CloudConfigServiceImpl";    private CloudconfigRpcInterface cloudconfigRpcInterface;    private CloudconfigExtInterface cloudconfigExtInterface;    public void register(MPSEngine mpsEngine) {        mpsEngine.registerModule(CloudconfigModule.getModuleInfo());    }    public void init(String uid) {        cloudconfigRpcInterface = CloudconfigModule.getModule(uid).getRpcInterface();        cloudconfigExtInterface = CloudconfigModule.getModule(uid).getExtInterface();    }    public void setCloudConfigNotifyCb(CloudconfigNotifyCb cb) {        if (cloudconfigExtInterface == null) {            String msg = "getExtInterface: init first";            Logger.e(TAG, msg);        } else {            cloudconfigExtInterface.setCloudconfigNotifyCb(cb);        }    }    public void getCloudConfig(GetCloudConfigReq req, GetCloudConfigCb cb) {        if (cloudconfigRpcInterface == null) {            cb.onFailure(asNotLogInError());        } else {            cloudconfigRpcInterface.getCloudConfig(req, cb);        }    }    public void getAppConfig(GetAppConfigReq req, GetAppConfigCb cb) {        if (cloudconfigRpcInterface == null) {            cb.onFailure(asNotLogInError());        } else {            cloudconfigRpcInterface.getAppConfig(req, cb);        }    }    public void getSlsConfig(GetSlsConfigReq req, GetSlsConfigCb cb) {        if (cloudconfigRpcInterface == null) {            cb.onFailure(asNotLogInError());        } else {            cloudconfigRpcInterface.getSlsConfig(req, cb);        }    }    public void getVisibleConfig(List<String> keyList, GetVisibleConfigCb cb) {        if (cloudconfigRpcInterface == null) {            cb.onFailure(asNotLogInError());        } else {            GetVisibleConfigReq req = new GetVisibleConfigReq();            CloudConfigBaseInfoV2 baseInfo = new CloudConfigBaseInfoV2();            baseInfo.mobileSystemInfo = new MobileSystemInfoV2(CommonUtil.OS, android.os.Build.VERSION.RELEASE,                    String.format("%s:%s", android.os.Build.BRAND, android.os.Build.MODEL));            req.baseInfo = baseInfo;            req.appVersion = BuildConfig.VERSION_NAME;            req.keyList = new ArrayList<>(keyList);            cloudconfigRpcInterface.getVisibleConfig(req, cb);        }    }    public void getVisibleConfig(GetVisibleConfigReq req, GetVisibleConfigCb cb) {        if (cloudconfigRpcInterface == null) {            cb.onFailure(asNotLogInError());        } else {            cloudconfigRpcInterface.getVisibleConfig(req, cb);        }    }    private DPSError asNotLogInError() {        DPSError error = new DPSError();        error.domain = DPSErrDomain.DPS_ERR_DOMAIN_CLIENT;        error.reason = Errors.NOT_LOGIN.getMessage();        return error;    }    @Override    public void destroy() {    }}