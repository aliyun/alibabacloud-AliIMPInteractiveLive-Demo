package com.aliyun.roompaas.base.tools.retry;import com.aliyun.roompaas.base.base.Producer;import com.aliyun.roompaas.base.log.Logger;import com.aliyun.roompaas.base.util.NetUtils;import com.aliyun.roompaas.base.util.ThreadUtil;import com.aliyun.roompaas.base.util.Utils;import java.util.concurrent.ScheduledFuture;import java.util.concurrent.TimeUnit;/** * Created by KyleCe on 2022/5/29 */public class RetryBot<T> implements IRetry<T> {    public static final String TAG = "RetryBot";    private Producer<T> action;    private ScheduledFuture<?> retryFuture;    private int retryTimes;    private int retryLimit = DEFAULT_TIMES_LIMIT;    private int retryIntervalInSeconds = DEFAULT_INTERVAL_IN_SECONDS;    private boolean requiresNetwork = true;    @Override    public void config(int retryLimit, int retryIntervalInSeconds, boolean requiresNetwork) {        this.retryLimit = retryLimit;        this.retryIntervalInSeconds = retryIntervalInSeconds;        this.requiresNetwork = requiresNetwork;    }    @Override    public boolean isAbleToRetry() {        return ((requiresNetwork & NetUtils.isNetConnected()) | !requiresNetwork) & !(retryTimes >= retryLimit);    }    @Override    public void setAction(Producer<T> action) {        this.action = action;    }    @Override    public void actionSuccess() {        Logger.i(TAG, "actionSuccess: ");        reset();    }    @Override    public void actionFail() {        Logger.i(TAG, "actionFail: ");        if (!isAbleToRetry() || action == null) {            Logger.e(TAG, "actionFail: end--invalid param: !isAbleToRetry , action=" + action);            return;        }        Utils.cancel(retryFuture);        retryFuture = ThreadUtil.schedule(new Runnable() {            @Override            public void run() {                T res = action.produce();                retryTimes++;                Logger.i(TAG, "actionFail: res= " + res + " , retryTimes=" + retryTimes);            }        }, retryIntervalInSeconds, TimeUnit.SECONDS);    }    @Override    public void reset() {        retryTimes = 0;        Utils.cancel(retryFuture);    }    @Override    public void destroy() {        action = null;        Utils.cancel(retryFuture);    }}