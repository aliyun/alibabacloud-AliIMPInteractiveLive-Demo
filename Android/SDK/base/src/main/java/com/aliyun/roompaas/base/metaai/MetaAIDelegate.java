package com.aliyun.roompaas.base.metaai;import android.support.annotation.Keep;import android.support.annotation.Nullable;import android.text.TextUtils;import com.alibaba.dingpaas.base.DPSError;import com.alibaba.dingpaas.meta_ai.DownloadCb;import com.alibaba.dingpaas.meta_ai.DownloadModelReq;import com.alibaba.dingpaas.meta_ai.DownloadModelRsp;import com.alibaba.dingpaas.meta_ai.ListCb;import com.alibaba.dingpaas.meta_ai.ListModelReq;import com.alibaba.dingpaas.meta_ai.ListModelRsp;import com.alibaba.dingpaas.meta_ai.MetaAiModule;import com.alibaba.dingpaas.meta_ai.MetaAiRpcInterface;import com.alibaba.dingpaas.meta_ai.ProductInfo;import com.aliyun.roompaas.base.IDestroyable;import com.aliyun.roompaas.base.ModuleRegister;import com.aliyun.roompaas.base.exposable.Callback;import com.aliyun.roompaas.base.log.Logger;import com.aliyun.roompaas.base.util.Utils;import java.util.ArrayList;import java.util.List;@Keeppublic class MetaAIDelegate implements IDestroyable {    public static final String TAG = "DocLWPDelegate";    private final MetaAiRpcInterface metaAIRpcInterface;    private String roomId;    static {        ModuleRegister.registerLwpModule(MetaAiModule.getModuleInfo());    }    public MetaAIDelegate(String roomId, String userId) {        this.roomId = roomId;        metaAIRpcInterface = MetaAiModule.getModule(userId).getRpcInterface();    }    /**     * @param shelfIds pass null to query all shelves     * @param cal     */    public void queryProductList(@Nullable List<String> shelfIds, final Callback<List<ProductInfo>> cal) {        if (metaAIRpcInterface == null) {            error(cal, "listShelves end: null interface");            return;        }        ListModelReq req = new ListModelReq();        req.shelfIds = shelfIds != null ? new ArrayList<>(shelfIds) : new ArrayList<String>();        metaAIRpcInterface.list(req, new ListCb() {            @Override            public void onSuccess(ListModelRsp createDocRsp) {                if (createDocRsp != null && createDocRsp.success) {                    Utils.callSuccess(cal, createDocRsp.productList);                } else {                    Utils.callError(cal, createDocRsp != null ? createDocRsp.errorMessage : "null response");                }            }            @Override            public void onFailure(DPSError dpsError) {                Utils.callError(cal, dpsError);            }        });    }    public void queryGoodsDownloadTicket(@Nullable String id, final Callback<DownloadModelRsp> cal) {        if (metaAIRpcInterface == null || TextUtils.isEmpty(id)) {            error(cal, "downloadGoods end: null interface or empty shelf id");            return;        }        DownloadModelReq req = new DownloadModelReq();        req.uuid = id;        metaAIRpcInterface.download(req, new DownloadCb() {            @Override            public void onSuccess(DownloadModelRsp createDocRsp) {                if (createDocRsp != null && createDocRsp.success) {                    Utils.callSuccess(cal, createDocRsp);                } else {                    Utils.callError(cal, createDocRsp != null ? createDocRsp.errorMessage : "null response");                }            }            @Override            public void onFailure(DPSError dpsError) {                Utils.callError(cal, dpsError);            }        });    }    private <T> void error(final Callback<T> callback, Object info) {        Logger.i(TAG, Utils.string(info));        Utils.callError(callback, info);    }    @Override    public void destroy() {    }}