package com.aliyun.roompaas.base.cloudconfig.base;import android.text.TextUtils;import com.alibaba.dingpaas.base.DPSError;import com.alibaba.dingpaas.cloudconfig.GetVisibleConfigCb;import com.alibaba.dingpaas.cloudconfig.GetVisibleConfigRsp;import com.aliyun.roompaas.base.BaseDestroy;import com.aliyun.roompaas.base.cloudconfig.CloudConfigMgr;import com.aliyun.roompaas.base.log.Logger;import java.util.Collections;import java.util.HashMap;import java.util.List;/** * Created by KyleCe on 2022/5/18 */public abstract class BaseCloudConfigDelegate extends BaseDestroy implements IBaseCloudConfig {    private final String TAG;    public BaseCloudConfigDelegate() {        TAG = this.getClass().getSimpleName();    }    protected List<String> primaryKeys4Query() {        return null;    }    protected String singlePrimaryKey() {        return null;    }    @Override    public void query() {        final String singleKey = singlePrimaryKey();        final List<String> keys = !TextUtils.isEmpty(singleKey) ? Collections.singletonList(singleKey) : primaryKeys4Query();        CloudConfigMgr.INSTANCE.getVisibleConfig(keys, new GetVisibleConfigCb() {            @Override            public void onSuccess(GetVisibleConfigRsp getVisibleConfigRsp) {                Logger.i(TAG, "onSuccess: " + getVisibleConfigRsp);                if (getVisibleConfigRsp != null && getVisibleConfigRsp.keyConfigMap != null) {                    String singleResult;                    if (!TextUtils.isEmpty(singleKey) && !TextUtils.isEmpty((singleResult = getVisibleConfigRsp.keyConfigMap.get(singleKey)))) {                        singlePrimaryKeyResultFetched(singleResult);                    } else {                        primaryKeyResultFetched(getVisibleConfigRsp.keyConfigMap);                    }                } else {                    primaryKeyResultFetchError("result content parse error");                }            }            @Override            public void onFailure(DPSError dpsError) {                Logger.e(TAG, "onFailure: " + dpsError.reason);                primaryKeyResultFetchError(dpsError.reason);            }        });    }    protected void primaryKeyResultFetched(HashMap<String, String> resultMap) {    }    protected void singlePrimaryKeyResultFetched(String result) {    }    protected void primaryKeyResultFetchError(String message) {    }    @Override    public void destroy() {        super.destroy();    }}